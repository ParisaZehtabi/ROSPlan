@@grammar::PddlPlus
@@eol_comments :: /;([^\n]*?)$/
@@parseinfo :: True
@@left_recursion :: False


start
    =
      domain:domain $
    | problem:problem $
    ;

domain_start
           =
           @:domain $
           ;

problem_start
            =
            @:problem $
            ;

problem
      =
      '(' 'define' '(' 'problem' name:name ')' body:{problem_body_element}+ ')'
      ;

problem_body_element
                   =
                     @:domain_req
                   | @:requirements
                   | @:objects
                   | @:initial_state
                   | @:goal
                   | @:metric
                   ;
domain_req
         =
         '(' ':domain' domain_name:name ')'
         ;
objects
      =
      '(' ':objects' objects:object_list ')'
      ;

initial_state
            =
            '(' ':init' init_list:init_list ')'
            ;

goal
   =
   '(' ':goal' goal:untimed_condition ')'
   ;

metric
     =
       '(' metric:':metric' kind:'minimize' expr:float_expr ')'
     | '(' metric:':metric' kind:'maximize' expr:float_expr ')'
     ;

domain
     =
     '(' 'define' '(' 'domain' name:name ')' body:domain_body ')'
     ;

domain_body
          =
          preamble:{domain_preamble_element}+ structures:{structures}+
          ;

domain_preamble_element
                      =
                        @:requirements
                      | @:types
                      | @:predicates
                      | @:functions
                      | @:synth_parameters
                      ;

requirements
           =
           '(' ':requirements' requirements:requirements_keywords ')'
           ;

requirements_keywords
                    =
                    {requirements_keyword}+
                    ;

requirements_keyword
                   =
                     ':equality'
                   | ':strips'
                   | ':typing'
                   | ':negative-preconditions'
                   | ':disjunctive-preconditions'
                   | ':ext-predicates'
                   | ':univ-predicates'
                   | ':conditional-effects'
                   | ':fluents'
                   | ':durative-actions'
                   | ':timed-initial-literals'
                   | ':time'
                   | ':actioncosts'
                   | ':objectfluents'
                   | ':numericfluents'
                   | ':modules'
                   | ':adl'
                   | ':quant-predicates'
                   | ':duration-inequalities'
                   | ':continuous-effects'
                   | ':derived-predicates'
                   | ':preferences'
                   | ':constraints'
                   ;

types
    =
    '(' ':types' types:{typed_types}+ ')'
    ;

synth_parameters
               =
               '(' ':synth-parameters' synth_parameters:var_list ')'
               ;

action_synth_parameters
                      =
                      ':synth-parameters' '(' @:var_list ')'
                      ;

typed_types
          =
            names:primitive_types '-' parents+:primitive_type
          | names:primitive_types '-' parents:either_type
          | names:primitive_types
          ;

primitive_types
              =
              {primitive_type}+
              ;

primitive_type
             =
             @:name
             ;

either_type
          =
          '(' 'either' @:primitive_types ')'
          ;

predicates
         =
         '(' ':predicates' predicates:predicate_decls ')'
         ;

predicate_decls
              =
              {predicate_decl}*
              ;

predicate_decl
             =
             '(' name:name formal_parameters:typed_var_list ')'
             ;

functions
         =
         '(' ':functions' functions:function_decls ')'
         ;

function_decls
              =
              {function_decl}*
              ;

function_decl
             =
             '(' name:name formal_parameters:typed_var_list ')'
             ;

structures
         =
           action:action
         | event:event
         | process:process
         | durative_action:durative_action
         ;

action
     =
     '(' ':action' name:name
       ':parameters' '(' formal_parameters:typed_var_list ')'
       [synth_params:action_synth_parameters]
       ':precondition' precondition:untimed_condition
       ':effect' effect:untimed_effects
     ')'
     ;

event
     =
     '(' ':event' name:name
       ':parameters' '(' formal_parameters:typed_var_list ')'
       ':precondition' precondition:untimed_condition
       ':effect' effect:untimed_effects
     ')'
     ;

process
     =
     '(' ':process' name:name
       ':parameters' '(' formal_parameters:typed_var_list ')'
       ':precondition' precondition:untimed_condition
       ':effect' effect:process_effects
     ')'
     ;

untimed_condition
                =
                  proposition:proposition
                | '(' op:'not' expressions+:untimed_condition ')'
                | '(' op:'and' expressions:{untimed_condition}+ ')'
                | '(' op:'or' expressions:{untimed_condition}+ ')'
                | '(' op:'imply' expressions+:untimed_condition expressions+:untimed_condition ')'
                | '(' op:arith_relation  expressions+:float_expr  expressions+:float_expr ')'
                ;

proposition
          =
            '(' name:name parameters:{parameter}* ')'
          | '(' const_bool:'true' ')'
          | '(' const_bool:'false' ')'
          ;

parameter
        =
          name
        | var_name
        ;

untimed_effects
              =
                @+:untimed_effect
              | '(' 'and' @:{untimed_effect}+ ')'
              ;

untimed_effect
             =
               '(' kind:'increase' function:function_name expr:float_expr_t ')'
             | '(' kind:'decrease' function:function_name expr:float_expr_t ')'
             | '(' kind:'assign' function:function_name expr:float_expr_t ')'
             | proposition:proposition
             | '(' 'not' negated_proposition:proposition ')'
             ;

durative_action
              =
              '(' ':durative-action' name:name
                ':parameters' '(' formal_parameters:typed_var_list ')'
                [synth_params:action_synth_parameters]
                ':duration' duration_constraint:duration_constraint
                ':condition' condition:timed_condition
                ':effect' effect:timed_effects
              ')'
              ;

timed_condition
              =
                '(' op:'and' expressions:{timed_condition}+ ')'
              | '(' 'over' time_ref:'all' condition:untimed_condition ')'
              | '(' 'at' time_ref:'start' condition:untimed_condition ')'
              | '(' 'at' time_ref:'end' condition:untimed_condition ')'
              ;

timed_effects
            =
              @+:timed_effect
            | '(' 'and' @:{timed_effect}+ ')'
            ;

timed_effect
           =
             '(' 'at' kind:'start' effect:untimed_effect ')'
           | '(' 'at' kind:'end' effect:untimed_effect ')'
           | '(' kind:'increase' function:function_name expr:float_expr_t ')'
           | '(' kind:'decrease' function:function_name expr:float_expr_t ')'
           ;

process_effects
            =
              @+:process_effect
            | '(' 'and' @:{process_effect}+ ')'
            ;

process_effect
           =
             '(' kind:'increase' function:function_name expr:float_expr_t ')'
           | '(' kind:'decrease' function:function_name expr:float_expr_t ')'
           ;

duration_constraint
                  =
                    '(' op:'and' expressions:{duration_constraint}+ ')'
                  | '(' op:dur_arith_relation var:'?duration' expr:float_expr ')'
                  ;

dur_arith_relation
                 =
                   '>='
                 | '<='
                 | '='
                 ;

arith_relation
             =
               '>='
             | '<='
             | '<'
             | '>'
             | '='
             ;

float_expr
         =
           '(' op:'+' expressions:{float_expr}+ ')'
         | '(' op:'*' expressions:{float_expr}+ ')'
         | '(' op:'-' expressions+:float_expr ')'
         | '(' op:'-' expressions+:float_expr expressions+:float_expr ')'
         | '(' op:'/' expressions+:float_expr expressions+:float_expr ')'
         | function:function_name
         | duration:'?duration'
         | param_name:var_name
         | number:number
         ;

float_expr_t
           =
             '(' op:'+' expressions:{float_expr_t}+ ')'
           | '(' op:'*' expressions:{float_expr_t}+ ')'
           | '(' op:'-' expressions+:float_expr_t ')'
           | '(' op:'-' expressions+:float_expr_t expressions+:float_expr_t ')'
           | '(' op:'/' expressions+:float_expr_t expressions+:float_expr_t ')'
           | function:function_name
           | number:number
           | duration:'?duration'
           | param_name:var_name
           | time_var:'#t'
           ;

function_name
            =
              '(' name:name parameters:{parameter}* ')'
            | name:name
            ;

number
     =
     /-?[0-9]+(\.[0-9]+)?/
     ;

var_list
	   =
	   {var_name}*
	   ;

typed_var_list
             =
             {typed_var}*
             ;

typed_var
        =
          var_names:{var_name}+ '-' types+:primitive_type
        | var_names:{var_name}+ '-' types:either_type
        ;

object_list
          =
          {object}*
          ;

object
     =
       obj_names:{name}+ '-' types+:primitive_type
     | obj_names:{name}+ '-' types:either_type
     ;

init_list
        =
        {init_element}*
        ;

init_element
           =
             '(' op:'=' function:function_name value:number ')'
           | '(' name:name parameters:{parameter}* ')'
           | '(' op:'not' '(' name:name parameters:{parameter}* ')' ')'
           | '(' op:'at' time:number element:init_element ')'
           ;


name
   =
   /[A-Za-z_][0-9A-Za-z_-]*/
   ;

var_name
       =
       /\?[A-Za-z_][0-9A-Za-z_-]*/
       ;

