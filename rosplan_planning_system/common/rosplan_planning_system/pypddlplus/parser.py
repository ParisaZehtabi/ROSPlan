#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


KEYWORDS = {}


class PddlPlusBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=';([^\\n]*?)$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(PddlPlusBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class PddlPlusParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=';([^\\n]*?)$',
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=PddlPlusBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(PddlPlusParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _start_(self):
        with self._choice():
            with self._option():
                self._domain_()
                self.name_last_node('domain')
                self._check_eof()
            with self._option():
                self._problem_()
                self.name_last_node('problem')
                self._check_eof()
            self._error('no available options')
        self.ast._define(
            ['domain', 'problem'],
            []
        )

    @graken()
    def _domain_start_(self):
        self._domain_()
        self.name_last_node('@')
        self._check_eof()

    @graken()
    def _problem_start_(self):
        self._problem_()
        self.name_last_node('@')
        self._check_eof()

    @graken()
    def _problem_(self):
        self._token('(')
        self._token('define')
        self._token('(')
        self._token('problem')
        self._name_()
        self.name_last_node('name')
        self._token(')')

        def block2():
            self._problem_body_element_()
        self._positive_closure(block2)
        self.name_last_node('body')
        self._token(')')
        self.ast._define(
            ['body', 'name'],
            []
        )

    @graken()
    def _problem_body_element_(self):
        with self._choice():
            with self._option():
                self._domain_req_()
                self.name_last_node('@')
            with self._option():
                self._requirements_()
                self.name_last_node('@')
            with self._option():
                self._objects_()
                self.name_last_node('@')
            with self._option():
                self._initial_state_()
                self.name_last_node('@')
            with self._option():
                self._goal_()
                self.name_last_node('@')
            with self._option():
                self._metric_()
                self.name_last_node('@')
            self._error('no available options')

    @graken()
    def _domain_req_(self):
        self._token('(')
        self._token(':domain')
        self._name_()
        self.name_last_node('domain_name')
        self._token(')')
        self.ast._define(
            ['domain_name'],
            []
        )

    @graken()
    def _objects_(self):
        self._token('(')
        self._token(':objects')
        self._object_list_()
        self.name_last_node('objects')
        self._token(')')
        self.ast._define(
            ['objects'],
            []
        )

    @graken()
    def _initial_state_(self):
        self._token('(')
        self._token(':init')
        self._init_list_()
        self.name_last_node('init_list')
        self._token(')')
        self.ast._define(
            ['init_list'],
            []
        )

    @graken()
    def _goal_(self):
        self._token('(')
        self._token(':goal')
        self._untimed_condition_()
        self.name_last_node('goal')
        self._token(')')
        self.ast._define(
            ['goal'],
            []
        )

    @graken()
    def _metric_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._token(':metric')
                self.name_last_node('metric')
                self._token('minimize')
                self.name_last_node('kind')
                self._float_expr_()
                self.name_last_node('expr')
                self._token(')')
            with self._option():
                self._token('(')
                self._token(':metric')
                self.name_last_node('metric')
                self._token('maximize')
                self.name_last_node('kind')
                self._float_expr_()
                self.name_last_node('expr')
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['expr', 'kind', 'metric'],
            []
        )

    @graken()
    def _domain_(self):
        self._token('(')
        self._token('define')
        self._token('(')
        self._token('domain')
        self._name_()
        self.name_last_node('name')
        self._token(')')
        self._domain_body_()
        self.name_last_node('body')
        self._token(')')
        self.ast._define(
            ['body', 'name'],
            []
        )

    @graken()
    def _domain_body_(self):

        def block1():
            self._domain_preamble_element_()
        self._positive_closure(block1)
        self.name_last_node('preamble')

        def block3():
            self._structures_()
        self._positive_closure(block3)
        self.name_last_node('structures')
        self.ast._define(
            ['preamble', 'structures'],
            []
        )

    @graken()
    def _domain_preamble_element_(self):
        with self._choice():
            with self._option():
                self._requirements_()
                self.name_last_node('@')
            with self._option():
                self._types_()
                self.name_last_node('@')
            with self._option():
                self._predicates_()
                self.name_last_node('@')
            with self._option():
                self._functions_()
                self.name_last_node('@')
            with self._option():
                self._synth_parameters_()
                self.name_last_node('@')
            self._error('no available options')

    @graken()
    def _requirements_(self):
        self._token('(')
        self._token(':requirements')
        self._requirements_keywords_()
        self.name_last_node('requirements')
        self._token(')')
        self.ast._define(
            ['requirements'],
            []
        )

    @graken()
    def _requirements_keywords_(self):

        def block0():
            self._requirements_keyword_()
        self._positive_closure(block0)

    @graken()
    def _requirements_keyword_(self):
        with self._choice():
            with self._option():
                self._token(':equality')
            with self._option():
                self._token(':strips')
            with self._option():
                self._token(':typing')
            with self._option():
                self._token(':negative-preconditions')
            with self._option():
                self._token(':disjunctive-preconditions')
            with self._option():
                self._token(':ext-predicates')
            with self._option():
                self._token(':univ-predicates')
            with self._option():
                self._token(':conditional-effects')
            with self._option():
                self._token(':fluents')
            with self._option():
                self._token(':durative-actions')
            with self._option():
                self._token(':timed-initial-literals')
            with self._option():
                self._token(':time')
            with self._option():
                self._token(':actioncosts')
            with self._option():
                self._token(':objectfluents')
            with self._option():
                self._token(':numericfluents')
            with self._option():
                self._token(':modules')
            with self._option():
                self._token(':adl')
            with self._option():
                self._token(':quant-predicates')
            with self._option():
                self._token(':duration-inequalities')
            with self._option():
                self._token(':continuous-effects')
            with self._option():
                self._token(':derived-predicates')
            with self._option():
                self._token(':preferences')
            with self._option():
                self._token(':constraints')
            self._error('expecting one of: :actioncosts :adl :conditional-effects :constraints :continuous-effects :derived-predicates :disjunctive-preconditions :duration-inequalities :durative-actions :equality :ext-predicates :fluents :modules :negative-preconditions :numericfluents :objectfluents :preferences :quant-predicates :strips :time :timed-initial-literals :typing :univ-predicates')

    @graken()
    def _types_(self):
        self._token('(')
        self._token(':types')

        def block1():
            self._typed_types_()
        self._positive_closure(block1)
        self.name_last_node('types')
        self._token(')')
        self.ast._define(
            ['types'],
            []
        )

    @graken()
    def _synth_parameters_(self):
        self._token('(')
        self._token(':synth-parameters')
        self._var_list_()
        self.name_last_node('synth_parameters')
        self._token(')')
        self.ast._define(
            ['synth_parameters'],
            []
        )

    @graken()
    def _action_synth_parameters_(self):
        self._token(':synth-parameters')
        self._token('(')
        self._var_list_()
        self.name_last_node('@')
        self._token(')')

    @graken()
    def _typed_types_(self):
        with self._choice():
            with self._option():
                self._primitive_types_()
                self.name_last_node('names')
                self._token('-')
                self._primitive_type_()
                self.add_last_node_to_name('parents')
            with self._option():
                self._primitive_types_()
                self.name_last_node('names')
                self._token('-')
                self._either_type_()
                self.name_last_node('parents')
            with self._option():
                self._primitive_types_()
                self.name_last_node('names')
            self._error('no available options')
        self.ast._define(
            ['names'],
            ['parents']
        )

    @graken()
    def _primitive_types_(self):

        def block0():
            self._primitive_type_()
        self._positive_closure(block0)

    @graken()
    def _primitive_type_(self):
        self._name_()
        self.name_last_node('@')

    @graken()
    def _either_type_(self):
        self._token('(')
        self._token('either')
        self._primitive_types_()
        self.name_last_node('@')
        self._token(')')

    @graken()
    def _predicates_(self):
        self._token('(')
        self._token(':predicates')
        self._predicate_decls_()
        self.name_last_node('predicates')
        self._token(')')
        self.ast._define(
            ['predicates'],
            []
        )

    @graken()
    def _predicate_decls_(self):

        def block0():
            self._predicate_decl_()
        self._closure(block0)

    @graken()
    def _predicate_decl_(self):
        self._token('(')
        self._name_()
        self.name_last_node('name')
        self._typed_var_list_()
        self.name_last_node('formal_parameters')
        self._token(')')
        self.ast._define(
            ['formal_parameters', 'name'],
            []
        )

    @graken()
    def _functions_(self):
        self._token('(')
        self._token(':functions')
        self._function_decls_()
        self.name_last_node('functions')
        self._token(')')
        self.ast._define(
            ['functions'],
            []
        )

    @graken()
    def _function_decls_(self):

        def block0():
            self._function_decl_()
        self._closure(block0)

    @graken()
    def _function_decl_(self):
        self._token('(')
        self._name_()
        self.name_last_node('name')
        self._typed_var_list_()
        self.name_last_node('formal_parameters')
        self._token(')')
        self.ast._define(
            ['formal_parameters', 'name'],
            []
        )

    @graken()
    def _structures_(self):
        with self._choice():
            with self._option():
                self._action_()
                self.name_last_node('action')
            with self._option():
                self._event_()
                self.name_last_node('event')
            with self._option():
                self._process_()
                self.name_last_node('process')
            with self._option():
                self._durative_action_()
                self.name_last_node('durative_action')
            self._error('no available options')
        self.ast._define(
            ['action', 'durative_action', 'event', 'process'],
            []
        )

    @graken()
    def _action_(self):
        self._token('(')
        self._token(':action')
        self._name_()
        self.name_last_node('name')
        self._token(':parameters')
        self._token('(')
        self._typed_var_list_()
        self.name_last_node('formal_parameters')
        self._token(')')
        with self._optional():
            self._action_synth_parameters_()
            self.name_last_node('synth_params')
        self._token(':precondition')
        self._untimed_condition_()
        self.name_last_node('precondition')
        self._token(':effect')
        self._untimed_effects_()
        self.name_last_node('effect')
        self._token(')')
        self.ast._define(
            ['effect', 'formal_parameters', 'name', 'precondition', 'synth_params'],
            []
        )

    @graken()
    def _event_(self):
        self._token('(')
        self._token(':event')
        self._name_()
        self.name_last_node('name')
        self._token(':parameters')
        self._token('(')
        self._typed_var_list_()
        self.name_last_node('formal_parameters')
        self._token(')')
        self._token(':precondition')
        self._untimed_condition_()
        self.name_last_node('precondition')
        self._token(':effect')
        self._untimed_effects_()
        self.name_last_node('effect')
        self._token(')')
        self.ast._define(
            ['effect', 'formal_parameters', 'name', 'precondition'],
            []
        )

    @graken()
    def _process_(self):
        self._token('(')
        self._token(':process')
        self._name_()
        self.name_last_node('name')
        self._token(':parameters')
        self._token('(')
        self._typed_var_list_()
        self.name_last_node('formal_parameters')
        self._token(')')
        self._token(':precondition')
        self._untimed_condition_()
        self.name_last_node('precondition')
        self._token(':effect')
        self._process_effects_()
        self.name_last_node('effect')
        self._token(')')
        self.ast._define(
            ['effect', 'formal_parameters', 'name', 'precondition'],
            []
        )

    @graken()
    def _untimed_condition_(self):
        with self._choice():
            with self._option():
                self._proposition_()
                self.name_last_node('proposition')
            with self._option():
                self._token('(')
                self._token('not')
                self.name_last_node('op')
                self._untimed_condition_()
                self.add_last_node_to_name('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('and')
                self.name_last_node('op')

                def block5():
                    self._untimed_condition_()
                self._positive_closure(block5)
                self.name_last_node('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('or')
                self.name_last_node('op')

                def block8():
                    self._untimed_condition_()
                self._positive_closure(block8)
                self.name_last_node('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('imply')
                self.name_last_node('op')
                self._untimed_condition_()
                self.add_last_node_to_name('expressions')
                self._untimed_condition_()
                self.add_last_node_to_name('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._arith_relation_()
                self.name_last_node('op')
                self._float_expr_()
                self.add_last_node_to_name('expressions')
                self._float_expr_()
                self.add_last_node_to_name('expressions')
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['op', 'proposition'],
            ['expressions']
        )

    @graken()
    def _proposition_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._name_()
                self.name_last_node('name')

                def block2():
                    self._parameter_()
                self._closure(block2)
                self.name_last_node('parameters')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('true')
                self.name_last_node('const_bool')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('false')
                self.name_last_node('const_bool')
                self._token(')')
            self._error('expecting one of: (')
        self.ast._define(
            ['const_bool', 'name', 'parameters'],
            []
        )

    @graken()
    def _parameter_(self):
        with self._choice():
            with self._option():
                self._name_()
            with self._option():
                self._var_name_()
            self._error('no available options')

    @graken()
    def _untimed_effects_(self):
        with self._choice():
            with self._option():
                self._untimed_effect_()
                self.add_last_node_to_name('@')
            with self._option():
                self._token('(')
                self._token('and')

                def block2():
                    self._untimed_effect_()
                self._positive_closure(block2)
                self.name_last_node('@')
                self._token(')')
            self._error('no available options')

    @graken()
    def _untimed_effect_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._token('increase')
                self.name_last_node('kind')
                self._function_name_()
                self.name_last_node('function')
                self._float_expr_t_()
                self.name_last_node('expr')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('decrease')
                self.name_last_node('kind')
                self._function_name_()
                self.name_last_node('function')
                self._float_expr_t_()
                self.name_last_node('expr')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('assign')
                self.name_last_node('kind')
                self._function_name_()
                self.name_last_node('function')
                self._float_expr_t_()
                self.name_last_node('expr')
                self._token(')')
            with self._option():
                self._proposition_()
                self.name_last_node('proposition')
            with self._option():
                self._token('(')
                self._token('not')
                self._proposition_()
                self.name_last_node('negated_proposition')
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['expr', 'function', 'kind', 'negated_proposition', 'proposition'],
            []
        )

    @graken()
    def _durative_action_(self):
        self._token('(')
        self._token(':durative-action')
        self._name_()
        self.name_last_node('name')
        self._token(':parameters')
        self._token('(')
        self._typed_var_list_()
        self.name_last_node('formal_parameters')
        self._token(')')
        with self._optional():
            self._action_synth_parameters_()
            self.name_last_node('synth_params')
        self._token(':duration')
        self._duration_constraint_()
        self.name_last_node('duration_constraint')
        self._token(':condition')
        self._timed_condition_()
        self.name_last_node('condition')
        self._token(':effect')
        self._timed_effects_()
        self.name_last_node('effect')
        self._token(')')
        self.ast._define(
            ['condition', 'duration_constraint', 'effect', 'formal_parameters', 'name', 'synth_params'],
            []
        )

    @graken()
    def _timed_condition_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._token('and')
                self.name_last_node('op')

                def block2():
                    self._timed_condition_()
                self._positive_closure(block2)
                self.name_last_node('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('over')
                self._token('all')
                self.name_last_node('time_ref')
                self._untimed_condition_()
                self.name_last_node('condition')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('at')
                self._token('start')
                self.name_last_node('time_ref')
                self._untimed_condition_()
                self.name_last_node('condition')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('at')
                self._token('end')
                self.name_last_node('time_ref')
                self._untimed_condition_()
                self.name_last_node('condition')
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['condition', 'expressions', 'op', 'time_ref'],
            []
        )

    @graken()
    def _timed_effects_(self):
        with self._choice():
            with self._option():
                self._timed_effect_()
                self.add_last_node_to_name('@')
            with self._option():
                self._token('(')
                self._token('and')

                def block2():
                    self._timed_effect_()
                self._positive_closure(block2)
                self.name_last_node('@')
                self._token(')')
            self._error('no available options')

    @graken()
    def _timed_effect_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._token('at')
                self._token('start')
                self.name_last_node('kind')
                self._untimed_effect_()
                self.name_last_node('effect')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('at')
                self._token('end')
                self.name_last_node('kind')
                self._untimed_effect_()
                self.name_last_node('effect')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('increase')
                self.name_last_node('kind')
                self._function_name_()
                self.name_last_node('function')
                self._float_expr_t_()
                self.name_last_node('expr')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('decrease')
                self.name_last_node('kind')
                self._function_name_()
                self.name_last_node('function')
                self._float_expr_t_()
                self.name_last_node('expr')
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['effect', 'expr', 'function', 'kind'],
            []
        )

    @graken()
    def _process_effects_(self):
        with self._choice():
            with self._option():
                self._process_effect_()
                self.add_last_node_to_name('@')
            with self._option():
                self._token('(')
                self._token('and')

                def block2():
                    self._process_effect_()
                self._positive_closure(block2)
                self.name_last_node('@')
                self._token(')')
            self._error('no available options')

    @graken()
    def _process_effect_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._token('increase')
                self.name_last_node('kind')
                self._function_name_()
                self.name_last_node('function')
                self._float_expr_t_()
                self.name_last_node('expr')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('decrease')
                self.name_last_node('kind')
                self._function_name_()
                self.name_last_node('function')
                self._float_expr_t_()
                self.name_last_node('expr')
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['expr', 'function', 'kind'],
            []
        )

    @graken()
    def _duration_constraint_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._token('and')
                self.name_last_node('op')

                def block2():
                    self._duration_constraint_()
                self._positive_closure(block2)
                self.name_last_node('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._dur_arith_relation_()
                self.name_last_node('op')
                self._token('?duration')
                self.name_last_node('var')
                self._float_expr_()
                self.name_last_node('expr')
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['expr', 'expressions', 'op', 'var'],
            []
        )

    @graken()
    def _dur_arith_relation_(self):
        with self._choice():
            with self._option():
                self._token('>=')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('=')
            self._error('expecting one of: <= = >=')

    @graken()
    def _arith_relation_(self):
        with self._choice():
            with self._option():
                self._token('>=')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('<')
            with self._option():
                self._token('>')
            with self._option():
                self._token('=')
            self._error('expecting one of: < <= = > >=')

    @graken()
    def _float_expr_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._token('+')
                self.name_last_node('op')

                def block2():
                    self._float_expr_()
                self._positive_closure(block2)
                self.name_last_node('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('*')
                self.name_last_node('op')

                def block5():
                    self._float_expr_()
                self._positive_closure(block5)
                self.name_last_node('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('-')
                self.name_last_node('op')
                self._float_expr_()
                self.add_last_node_to_name('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('-')
                self.name_last_node('op')
                self._float_expr_()
                self.add_last_node_to_name('expressions')
                self._float_expr_()
                self.add_last_node_to_name('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('/')
                self.name_last_node('op')
                self._float_expr_()
                self.add_last_node_to_name('expressions')
                self._float_expr_()
                self.add_last_node_to_name('expressions')
                self._token(')')
            with self._option():
                self._function_name_()
                self.name_last_node('function')
            with self._option():
                self._token('?duration')
                self.name_last_node('duration')
            with self._option():
                self._var_name_()
                self.name_last_node('param_name')
            with self._option():
                self._number_()
                self.name_last_node('number')
            self._error('expecting one of: ?duration')
        self.ast._define(
            ['duration', 'function', 'number', 'op', 'param_name'],
            ['expressions']
        )

    @graken()
    def _float_expr_t_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._token('+')
                self.name_last_node('op')

                def block2():
                    self._float_expr_t_()
                self._positive_closure(block2)
                self.name_last_node('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('*')
                self.name_last_node('op')

                def block5():
                    self._float_expr_t_()
                self._positive_closure(block5)
                self.name_last_node('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('-')
                self.name_last_node('op')
                self._float_expr_t_()
                self.add_last_node_to_name('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('-')
                self.name_last_node('op')
                self._float_expr_t_()
                self.add_last_node_to_name('expressions')
                self._float_expr_t_()
                self.add_last_node_to_name('expressions')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('/')
                self.name_last_node('op')
                self._float_expr_t_()
                self.add_last_node_to_name('expressions')
                self._float_expr_t_()
                self.add_last_node_to_name('expressions')
                self._token(')')
            with self._option():
                self._function_name_()
                self.name_last_node('function')
            with self._option():
                self._number_()
                self.name_last_node('number')
            with self._option():
                self._token('?duration')
                self.name_last_node('duration')
            with self._option():
                self._var_name_()
                self.name_last_node('param_name')
            with self._option():
                self._token('#t')
                self.name_last_node('time_var')
            self._error('expecting one of: #t ?duration')
        self.ast._define(
            ['duration', 'function', 'number', 'op', 'param_name', 'time_var'],
            ['expressions']
        )

    @graken()
    def _function_name_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._name_()
                self.name_last_node('name')

                def block2():
                    self._parameter_()
                self._closure(block2)
                self.name_last_node('parameters')
                self._token(')')
            with self._option():
                self._name_()
                self.name_last_node('name')
            self._error('no available options')
        self.ast._define(
            ['name', 'parameters'],
            []
        )

    @graken()
    def _number_(self):
        self._pattern(r'-?[0-9]+(\.[0-9]+)?')

    @graken()
    def _var_list_(self):

        def block0():
            self._var_name_()
        self._closure(block0)

    @graken()
    def _typed_var_list_(self):

        def block0():
            self._typed_var_()
        self._closure(block0)

    @graken()
    def _typed_var_(self):
        with self._choice():
            with self._option():

                def block1():
                    self._var_name_()
                self._positive_closure(block1)
                self.name_last_node('var_names')
                self._token('-')
                self._primitive_type_()
                self.add_last_node_to_name('types')
            with self._option():

                def block4():
                    self._var_name_()
                self._positive_closure(block4)
                self.name_last_node('var_names')
                self._token('-')
                self._either_type_()
                self.name_last_node('types')
            self._error('no available options')
        self.ast._define(
            ['var_names'],
            ['types']
        )

    @graken()
    def _object_list_(self):

        def block0():
            self._object_()
        self._closure(block0)

    @graken()
    def _object_(self):
        with self._choice():
            with self._option():

                def block1():
                    self._name_()
                self._positive_closure(block1)
                self.name_last_node('obj_names')
                self._token('-')
                self._primitive_type_()
                self.add_last_node_to_name('types')
            with self._option():

                def block4():
                    self._name_()
                self._positive_closure(block4)
                self.name_last_node('obj_names')
                self._token('-')
                self._either_type_()
                self.name_last_node('types')
            self._error('no available options')
        self.ast._define(
            ['obj_names'],
            ['types']
        )

    @graken()
    def _init_list_(self):

        def block0():
            self._init_element_()
        self._closure(block0)

    @graken()
    def _init_element_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._token('=')
                self.name_last_node('op')
                self._function_name_()
                self.name_last_node('function')
                self._number_()
                self.name_last_node('value')
                self._token(')')
            with self._option():
                self._token('(')
                self._name_()
                self.name_last_node('name')

                def block5():
                    self._parameter_()
                self._closure(block5)
                self.name_last_node('parameters')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('not')
                self.name_last_node('op')
                self._token('(')
                self._name_()
                self.name_last_node('name')

                def block9():
                    self._parameter_()
                self._closure(block9)
                self.name_last_node('parameters')
                self._token(')')
                self._token(')')
            with self._option():
                self._token('(')
                self._token('at')
                self.name_last_node('op')
                self._number_()
                self.name_last_node('time')
                self._init_element_()
                self.name_last_node('element')
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['element', 'function', 'name', 'op', 'parameters', 'time', 'value'],
            []
        )

    @graken()
    def _name_(self):
        self._pattern(r'[A-Za-z_][0-9A-Za-z_-]*')

    @graken()
    def _var_name_(self):
        self._pattern(r'\?[A-Za-z_][0-9A-Za-z_-]*')


class PddlPlusSemantics(object):
    def start(self, ast):
        return ast

    def domain_start(self, ast):
        return ast

    def problem_start(self, ast):
        return ast

    def problem(self, ast):
        return ast

    def problem_body_element(self, ast):
        return ast

    def domain_req(self, ast):
        return ast

    def objects(self, ast):
        return ast

    def initial_state(self, ast):
        return ast

    def goal(self, ast):
        return ast

    def metric(self, ast):
        return ast

    def domain(self, ast):
        return ast

    def domain_body(self, ast):
        return ast

    def domain_preamble_element(self, ast):
        return ast

    def requirements(self, ast):
        return ast

    def requirements_keywords(self, ast):
        return ast

    def requirements_keyword(self, ast):
        return ast

    def types(self, ast):
        return ast

    def synth_parameters(self, ast):
        return ast

    def action_synth_parameters(self, ast):
        return ast

    def typed_types(self, ast):
        return ast

    def primitive_types(self, ast):
        return ast

    def primitive_type(self, ast):
        return ast

    def either_type(self, ast):
        return ast

    def predicates(self, ast):
        return ast

    def predicate_decls(self, ast):
        return ast

    def predicate_decl(self, ast):
        return ast

    def functions(self, ast):
        return ast

    def function_decls(self, ast):
        return ast

    def function_decl(self, ast):
        return ast

    def structures(self, ast):
        return ast

    def action(self, ast):
        return ast

    def event(self, ast):
        return ast

    def process(self, ast):
        return ast

    def untimed_condition(self, ast):
        return ast

    def proposition(self, ast):
        return ast

    def parameter(self, ast):
        return ast

    def untimed_effects(self, ast):
        return ast

    def untimed_effect(self, ast):
        return ast

    def durative_action(self, ast):
        return ast

    def timed_condition(self, ast):
        return ast

    def timed_effects(self, ast):
        return ast

    def timed_effect(self, ast):
        return ast

    def process_effects(self, ast):
        return ast

    def process_effect(self, ast):
        return ast

    def duration_constraint(self, ast):
        return ast

    def dur_arith_relation(self, ast):
        return ast

    def arith_relation(self, ast):
        return ast

    def float_expr(self, ast):
        return ast

    def float_expr_t(self, ast):
        return ast

    def function_name(self, ast):
        return ast

    def number(self, ast):
        return ast

    def var_list(self, ast):
        return ast

    def typed_var_list(self, ast):
        return ast

    def typed_var(self, ast):
        return ast

    def object_list(self, ast):
        return ast

    def object(self, ast):
        return ast

    def init_list(self, ast):
        return ast

    def init_element(self, ast):
        return ast

    def name(self, ast):
        return ast

    def var_name(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = PddlPlusParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from grako.util import asjson

    ast = generic_main(main, PddlPlusParser, name='PddlPlus')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()

